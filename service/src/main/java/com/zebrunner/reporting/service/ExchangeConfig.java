package com.zebrunner.reporting.service;

import lombok.RequiredArgsConstructor;
import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.DirectExchange;
import org.springframework.amqp.core.FanoutExchange;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.annotation.PostConstruct;
import java.util.UUID;

@Configuration
@RequiredArgsConstructor
public class ExchangeConfig {

    public static final String INTEGRATION_SAVED_EXCHANGE = "integration-saved";

    public static final String USER_SAVED_EXCHANGE = "user-saved";
    public static final String USER_SAVED_REPORTING_SERVICE_QUEUE = "user-saved-reporting-service-queue";

    public static final String SEND_EMAIL_EXCHANGE = "send-email";
    public static final String SEND_EMAIL_QUEUE = "send-email-queue";
    public static final String SEND_EMAIL_ROUTING_KEY = "send-email-routing-key";

    public static final String CREATE_DEFAULT_USER_EXCHANGE = "create-default-user";
    public static final String CREATE_DEFAULT_USER_QUEUE = "create-default-user-queue";
    public static final String CREATE_DEFAULT_USER_ROUTING_KEY = "create-default-user-routing-key";

    private final RabbitTemplate rabbitTemplate;

    @PostConstruct
    public void init() {
        this.rabbitTemplate.setMessageConverter(new Jackson2JsonMessageConverter());
    }

    @Bean
    public DirectExchange eventsTopicExchange(@Value("${spring.rabbitmq.template.exchange}") String exchangeName) {
        return new DirectExchange(exchangeName, false, true);
    }

    //////////////////////////////////////////////////////////
    //                   Integration Saved
    //////////////////////////////////////////////////////////

    @Bean
    public FanoutExchange integrationSavedExchange() {
        return new FanoutExchange(INTEGRATION_SAVED_EXCHANGE);
    }

    //////////////////////////////////////////////////////////
    //                      User Saved
    //////////////////////////////////////////////////////////

    @Bean
    public FanoutExchange userSavedExchange() {
        return new FanoutExchange(USER_SAVED_EXCHANGE);
    }

    @Bean
    public Queue userSavedQueue() {
        return new Queue(USER_SAVED_REPORTING_SERVICE_QUEUE);
    }

    @Bean
    public Binding userSavedBinding(FanoutExchange userSavedExchange, Queue userSavedQueue) {
        return BindingBuilder.bind(userSavedQueue).to(userSavedExchange);
    }

    //////////////////////////////////////////////////////////
    //                    Send Email
    //////////////////////////////////////////////////////////

    @Bean
    public DirectExchange sendEmailExchange() {
        return new DirectExchange(SEND_EMAIL_EXCHANGE);
    }

    @Bean
    public Queue sendEmailQueue() {
        return new Queue(SEND_EMAIL_QUEUE);
    }

    @Bean
    public Binding sendEmailBinding(DirectExchange sendEmailExchange, Queue sendEmailQueue) {
        return BindingBuilder.bind(sendEmailQueue).to(sendEmailExchange).with(SEND_EMAIL_ROUTING_KEY);
    }

    //////////////////////////////////////////////////////////
    //                    Create default user
    //////////////////////////////////////////////////////////

    @Bean
    public DirectExchange createDefaultUserExchange() {
        return new DirectExchange(CREATE_DEFAULT_USER_EXCHANGE);
    }

    @Bean
    public Queue createDefaultUserQueue() {
        return new Queue(CREATE_DEFAULT_USER_QUEUE, false, false, true);
    }

    @Bean
    public Binding createDefaultUserBinding(DirectExchange createDefaultUserExchange, Queue createDefaultUserQueue) {
        return BindingBuilder.bind(createDefaultUserQueue)
                             .to(createDefaultUserExchange)
                             .with(CREATE_DEFAULT_USER_ROUTING_KEY);
    }

    /**
     * Queue with autogenerated name to get rid of duplicate names on different app instances
     *
     * @return setting queue with prefix 'settingsQueue'
     */
    @Bean
    public Queue settingsQueue() {
        return new Queue(generateQueueName("settingsQueue"), false, false, true);
    }

    /**
     * Queue with autogenerated name to get rid of duplicate names on different app instances
     *
     * @return tenancy queue with prefix 'tenanciesQueue'
     */
    @Bean
    public Queue tenanciesQueue() {
        return new Queue(generateQueueName("tenanciesQueue"), false, false, true);
    }

    @Bean
    public Queue zfrEventsQueue() {
        return new Queue("zfrEventsQueue", false, false, true);
    }

    @Bean
    public Queue zbrEventsQueue() {
        return new Queue("zbrEventsQueue", false, false, true);
    }

//    @Bean
//    public Queue zbrIntegrationsQueue() {
//        return new Queue(INTEGRATION_SAVED_QUEUE, false, false, true);
//    }

    @Bean
    public Binding settingsBinding(DirectExchange eventsTopicExchange, Queue settingsQueue) {
        return BindingBuilder.bind(settingsQueue).to(eventsTopicExchange).with("settings");
    }

    @Bean
    public Binding tenanciesBinding(DirectExchange eventsTopicExchange, Queue tenanciesQueue) {
        return BindingBuilder.bind(tenanciesQueue).to(eventsTopicExchange).with("tenancies");
    }

    @Bean
    public Binding zfrEventsBinding(DirectExchange eventsTopicExchange, Queue zfrEventsQueue) {
        return BindingBuilder.bind(zfrEventsQueue).to(eventsTopicExchange).with("zfr_events");
    }

    @Bean
    public Binding zbrEventsBinding(DirectExchange eventsTopicExchange, Queue zbrEventsQueue) {
        return BindingBuilder.bind(zbrEventsQueue).to(eventsTopicExchange).with("zbr_events");
    }

//    @Bean
//    public Binding integrationSavedBinding(DirectExchange eventsTopicExchange, Queue zbrIntegrationsQueue) {
//        return BindingBuilder.bind(zbrIntegrationsQueue).to(eventsTopicExchange).with(INTEGRATION_SAVED_ROUTING_KEY);
//    }

    private String generateQueueName(String prefix) {
        return String.format("%s-%s", prefix, UUID.randomUUID().toString());
    }

}
